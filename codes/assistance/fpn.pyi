def signedfloor(dividend: int, divisor: int) -> int: ...


def signedmod(dividend: int) -> int: ...


def signeddivmod(dividend: int) -> tuple[int, int]: ...


class FPN3:
    __number: int

    def __init__(self,
                 integer: int = 0,
                 decimal: int = 0): ...

    def __repr__(self): ...

    def __int__(self): ...

    def __str__(self): ...

    def __float__(self): ...

    def __add__(self, other: 'FPN3') -> 'FPN3': ...

    def __radd__(self, other: 'FPN3') -> 'FPN3': ...

    def __iadd__(self, other: 'FPN3'): (self): ...

    def __sub__(self, other: 'FPN3') -> 'FPN3': ...

    def __rsub__(self, other: 'FPN3') -> 'FPN3': ...

    def __isub__(self, other: 'FPN3'): (self): ...

    def __mul__(self, other: 'FPN3') -> 'FPN3': ...

    def __rmul__(self, other: 'FPN3'): ...

    def __imul__(self, other: 'FPN3'): (self): ...

    def __gt__(self, other: 'FPN3'): ...

    def __lt__(self, other: 'FPN3'): ...

    def __ge__(self, other: 'FPN3'): ...

    def __le__(self, other: 'FPN3'): ...

    def __bool__(self): ...

    def integer(self) -> int: ...

    def decimal(self)-> int:...

    def bigint(self) -> int: ...

    @classmethod
    def frombigint(cls, bigint: int) -> 'FPN3': ...
