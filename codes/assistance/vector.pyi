from typing import Tuple

from .fpn import FPN3


class IntVector2:
    x: int
    y: int

    def __init__(
            self,
            x: int = 0,
            y: int = 0
    ): ...

    def __repr__(self): ...

    def __str__(self): ...

    def __add__(self, other: 'IntVector2') -> 'IntVector2': ...

    def __radd__(self, other: 'IntVector2') -> 'IntVector2': ...

    def __iadd__(self, other: 'IntVector2'): (self): ...

    def __sub__(self, other: 'IntVector2') -> 'IntVector2': ...

    def __rsub__(self, other: 'IntVector2') -> 'IntVector2': ...

    def __isub__(self, other: 'IntVector2'): (self): ...

    def __mul__(self, other: int) -> 'IntVector2': ...

    def __rmul__(self, other: int) -> 'IntVector2': ...

    def __imul__(self, other: int): (self): ...

    def __floordiv__(self, other: int) -> 'IntVector2': ...

    def __ifloordiv__(self, other: int): (self): ...

    def __mod__(self, other: int) -> 'IntVector2': ...

    def __imod__(self, other: int): (self): ...

    def __hash__(self) -> int: ...

    def __bool__(self): ...

    def __iter__(self): ...

    def tuple(self) -> Tuple[int, int]: ...

    @classmethod
    def from_tuple(cls, tuple_: Tuple[int, int]) -> 'IntVector2': ...


class FPNVector2:
    x: FPN3
    y: FPN3

    def __init__(
            self,
            x: FPN3 = FPN3(),
            y: FPN3 = FPN3()
    ): ...

    def __repr__(self): ...

    def __add__(self, other: 'FPNVector2') -> 'FPNVector2': ...

    def __radd__(self, other: 'FPNVector2') -> 'FPNVector2': ...

    def __iadd__(self, other: 'FPNVector2'): (self): ...

    def __sub__(self, other: 'FPNVector2') -> 'FPNVector2': ...

    def __rsub__(self, other: 'FPNVector2') -> 'FPNVector2': ...

    def __isub__(self, other: 'FPNVector2'): (self): ...

    def __mul__(self, other: 'FPN3') -> 'FPNVector2': ...

    def __rmul__(self, other: 'FPN3') -> 'FPNVector2': ...

    def __imul__(self, other: 'FPN3'): (self): ...

    def __bool__(self): ...

    def __iter__(self): ...

    def int_vector2(self) -> 'IntVector2': ...

    def tuple(self) -> tuple[FPN3, FPN3]: ...

    def int_tuple(self) -> Tuple[int, int]: ...

    @classmethod
    def from_int_vector2(cls, int_vector2: 'IntVector2') -> 'FPNVector2': ...

    @classmethod
    def from_tuple(cls, tuple_: Tuple[FPN3, FPN3]) -> 'FPNVector2': ...

    @classmethod
    def from_int_tuple(cls, int_tuple: Tuple[int, int]) -> 'FPNVector2': ...
